//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: RolandArrangerTypes.bt
//   Authors: Daniel Stien <daniel@stien.org>
//   Version: 
//   Purpose: Common types used in Roland arranger ROM images.
//  Category: Misc
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#define TICKS_PER_BEAT 24

typedef struct (int length)
{
    if (length == -1) {
        ubyte SpecifiedLength;
        length = SpecifiedLength;
    }
    char Value[length];
} Label <optimize=false,read=Str("%s", Value)>;

typedef struct
{
    char  Name[12];
    char  Data0[23];
    ubyte Sample;
    char  Data[180];
} Instrument <read=Str("%s (%i)", Name, Sample)>;

typedef struct
{
    char Name[12];
    char Data[48];
} Sample <read=Str("%s", Name)>;

typedef struct
{
    char Name[12];
    char Data[204];
} DrumSample <read=Str("%s", Name)>;

typedef struct
{
    char Data[1152];
    char Name[12];
} Drumset <read=Str("%s", Name)>;

typedef struct
{
    char Header[25];
    byte TitleLength;
    char Title[TitleLength];
} Smf <read=Str("%s", Title)>;

// GS Init?
typedef struct
{
    uint16 Unknown0[4];
    char   Frustration[16];
    uchar  Unknown1[48];
    struct
    {
        uint32 Data0;
        uchar  Channel;
        uchar  Data1[107];
    } Channel[16];
    char Version[32];
/*
    // Nah.
    uint16 countUnknown2;
    uchar unknown2[countUnknown2 * 10];
    uint16 unknown3;
    uchar unknown4[18 * 10];
*/
} GsInit;

typedef struct
{
    ubyte  Segments[3];
    ushort Offsets[6];
    ubyte  TicksPerBar;
    ubyte  Tempo;
    struct {
        ubyte  Segments[9];
        ushort Offsets[18];
    } ChunkReferences[4];
} StyleHeader <comment=CommentStyleHeader>;

string CommentStyleHeader(StyleHeader &h)
{
    local string s;
    SPrintf(s, "%d/4 @ %d BPM", h.TicksPerBar / TICKS_PER_BEAT, h.Tempo);
    return s;
}

// Chunk of custom coded MIDI messages
typedef struct
{
    //Printf("0x%04X, ", FTell() & 0xFFFF);
    while (true) {
        ubyte cmd;
        if (cmd == 0x3F/* || cmd == 0xFF*/) break;
    }
} Chunk <comment=CommentChunk,optimize=false>;

string CommentChunk(Chunk &c)
{
    local string s;
    local int i, m;
    for (i = 0, m = Min(10, sizeof(c)); i < m; i++) {
        SPrintf(s, "%s %02X", s, c.cmd[i]);
    }
    SPrintf(s, "%s ... (%d)", s, sizeof(c));
    return s;
return "...";
}

typedef struct (int count)
{
    //Printf("\n");
    BitfieldDisablePadding();
    int Unknown : 24;
    Chunk Chunks[count];
} ChunkCollection <comment=Str("%d", Unknown),optimize=false>;

{
